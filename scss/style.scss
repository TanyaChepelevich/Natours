/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485







*/
/*we use the inherit keyword to force inheritance.
So the box-sizing property by itself is not inherited, 
but by setting the box-sizing property 
on each and every element on the entire page (*) to inherit, 
it'll automatically inherit whatever we put here (body el) on border-box.*/

$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;

$color-white: #fff;
$color-gray: #777;

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

/*16px is 100% and the default font-size browser setting

 if we set the font to, like, the 10px, 
then we remove the ability for the users 
to see our website properly,
because they can no longer change the default font size.
that is why we're going to set 
over a font size to a percentage here, 
which will translate to a percentage 
of the font size given by the browser.

10 px is what we want for the root font size
it is 62.5% from the default setting.*/
html {
  font-size: 62.5%;
}

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /*1.7 times bigger than the predefined line height*/
  line-height: 1.7;
  color: #777;
  /*padding of 30px gives a nice small white border/frame around entire webpage*/
  padding: 3rem;
  box-sizing: border-box;
}

.header {
  height: 95vh;

  background-image: linear-gradient(to right, $color-primary-light, $color-primary-dark), url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  /*свойство clip-path создаёт ограниченную область, 
  которая определяет какая часть элемента должна быть видимой. 
  Те части, которые находятся внутри области, видимы, 
  в то время как части вне области, скрыты.*/
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative;
}

.header__logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem;
}

.header__logo {
  height: 3.5rem;
}

.header__text-box {
  position: absolute;
  /* in relation to the parent element*/
  top: 40%;
  left: 50%;
  /*in relation to the element itself*/
  transform: translate(-50%, -50%);
  text-align: center;
}

.heading-primary {
  color: $color-white;
  text-transform: uppercase;

  backface-visibility: hidden;

  margin-bottom: 6rem;
}
.heading-primary--main {
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;

  animation-name: moveInLeft;
  animation-duration: 3s;
}

.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;

  animation-name: moveInRight;
  animation-duration: 3s;
}

@keyframes moveInLeft {
  /*0% which is before 
the animation actually starts*/
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }
  80% {
    transform: translateX(2rem);
  }
  /*100% is when the animation finishes*/
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }
  80% {
    transform: translateX(-2rem);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(10rem);
  }

  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  border-radius: 10rem;
  transition: all 0.2s;
  position: relative;
  font-size: 1.6rem;
}

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
}

.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
}
.btn--white {
  background-color: $color-white;
  color: #777;
}

/* after pseudo-element 
is basically treated like a child of the button. 
And so if we say that we want the height to be 100%,
that's 100% of the width of the button. */
.btn::after {
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -2;
  transition: all 0.4s;

  /* animation: moveInBottom 3s; */
}

.btn--white::after {
  background-color: $color-white;
}

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}

/* C animation-fill-mode: backwards Элемент  сохранит стиль 
первого ключевого кадра moveInBottom
на протяжении периода animation-delay.*/
.btn--animated {
  animation: moveInBottom 1.5s ease-out 0.7s;
  animation-fill-mode: backwards;
}
